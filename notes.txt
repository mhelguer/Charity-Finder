PROJECT LAYOUT	
Supporting files have names that begin with an underscore.
	-For example, the _Layout.cshtml file configures UI elements common to all pages
	- _Layout.cshtml sets up the navigation menu at the top of the page and the copyright notice at the bottom of the page

- wwwroot: static assets(html, js, css files)
- appsettings.json: configuration data(connection strings)

-------------------------------------------------------------------------------
ADD A MODEL

- model classes:
	- use Entity Framework(EF) Core
	- define properties of data that is stored in the database
	- EF Core: object-relational mapper; simplifies data access

- scaffolding: make pages for CRUD(Create, Read, Update, Delete) for Movie model
to scaffold:
1. create Pages/Movies folder
2. Add->New Scaffolded Item ->Razor Pages using Entity Framework (CRUD)
3. 
	Model class: Movie (RazorPagesMovie.Models)
	DbContext class: RazorPagesMovie.Data.RazorPagesMovieContext	// sets up Create, Read, Update, and Delete for Movie model
	Database provider: SQL Server
	- appsettings.json now has connection string that is used to connected to local database (RazorPagesMovieContext)

- Create initial db schema using EF's migration feature:
	Tools->Nuget Package Manager->Package Manager Console
	- enter "Add-Migration InitialCreate"
			"Update-Database"
		- Add-Migration: generates code to create database

- https://localhost:7264/Movies to see movie list with CRUD options
- https://localhost:7264/Movies/Create to add new movie

-------------------------------------------------------------------------------
SCAFFOLDED RAZOR PAGES

- Razor Pages are made from PageModel in Pages/Movies/Index.cshtml.cs
- when GET req made, OnGetAsync() returns list of movies to the Page
	- OnGetAsync() or OnGet() are called to initialize state of page

in Index.cshtml:
@page
@model RazorPagesMovie.Pages.Movies.IndexModel

@{
    ViewData["Title"] = "Index";
}
- Razor can transition from HTML to C# or Razor markup
	- @<Razor keyword> transitions into Razor markup (ex: @page, @model)
	- @<anything else> transitions into C#
- @page: makes file an MVC action; can handle requests
- @model: specifies type of model passed to the page

-------------------
in Pages/Shared/_Layout.cshtml:
<div class="container">
    <main role="main" class="pb-3">
        @RenderBody()
    </main>
</div>
- Layout files are like components in ember, content can be used in different places in the site
- @RenderBody(): page-specific views show up in here, wrapped in Layout page
	- ex: Pages/Privacy.cshtml is rendered inside RenderBody()

--------------------
in Pages/Movies/Index.cshtml:
@{
    ViewData["Title"] = "Index";
}
- Razor transitions into C#
- { } enclose C# code
- ViewData is a dictionary that you can put new things into that will appear in the view:

in Pages/Shared/_Layour.cshtml:
<title>@ViewData["Title"] - RazorPagesMovie</title>

--------------------
in Pages/_ViewStart.cshtml:
@{
    Layout = "_Layout";
}
- sets layout file to Pages/Shared/_Layout.cshtml for all razor files under Pages folder

--------------------
in Pages/Movies/Create.cshtml.cs:
[BindProperty]
public Movie Movie { get; set; } = default!;
- [BindProperty]: ties incoming POSTed values to attributes in the Movie model
- OnPostAsync(): runs when pages posts form data
- OnGet(): initializes page state

-------------------------------------------------------------------------------
WORK WITH A DATABASE

- RazorPagesMovieContext: object in Program.cs that handles connection to database and
	mapping Movie objects to database columns and tables
	- ConnectionString is in appsettings.json; can use environmental variables here

- to see db, View->SQL Server Object Explorer->SQL Server/(localdb)/Databases/RazorPageMovieContext
	- right-click dbo.Movie and select View Designer to see column info
	- right-click dbo.Movie and select View Data to see currently existing rows


- Models/SeedData.cs: code to seed/initialize data in database
	- need to add "using RazorPagesMovie.Models;" in Program.cs to make SeedData.cs work

in Models/SeedData.cs:
// Look for any movies.
if (context.Movie.Any())
{
    return;   // DB has been seeded
}
	- if there are any movies already in db, no movies are added

in Program.cs:
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;

    SeedData.Initialize(services);
}
- makes db context instance and calls Intialize function from SeedData.cs
- "using" gets rid of the db context when code block is finished

-------------------------------------------------------------------------------
UPDATE THE PAGES

- need to change ReleaseDate to Release Date on website

update Models/Movie.cs:
using System.ComponentModel.DataAnnotations.Schema;
...
[Display(Name = "Release Date")]	// [Display] deals with what is displayed, in this case the Name attribute changing from 
									// "ReleaseDate" to "Release Date"
[DataType(DataType.Date)]			// already in, but [DataType] specifies the data's type that is displayed so that the time isnt
...
[Column(TypeName = "decimal(18, 2)")]	// maps Price to currency in db

- in the https://localhost:7264/Movies page, the links for Edit, Details and Delete are formed in Pages/Movies/Index.cshtml:
<a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
<a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
<a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
	- ex: https://localhost:7264/Movies/Edit?id=4
	- "./Edit" is relative route
	- to change "/Edit?id=4" to "/Edit/4" in link, change @page at top of each link's cshtml file in Pages/Movies to @page "{id:int}"
	- to make id optional, use @page "{id:int?}", or else 404 page will appear if invalid id used in address


- concurrency exception: when one client deletes an object that is currently being changed by another client

- in Edit.cshtml.cs:
[BindProperty]
public Movie Movie {get; set;}
- BindProperty: enables Model binding(automated way of getting values from files and convert from string fo .NET types and init'ing objects)

-------------------------------------------------------------------------------
ADD SEARCH

want to search movies by genre or name


in Pages/Movies/Index.cshtml.cs:
[BindProperty(SupportsGet = true)]
public string? SearchString { get; set; }
public SelectList? Genres { get; set; }

[BindProperty(SupportsGet = true)]
public string? MovieGenre { get; set; }
- SearchString: contains the inputted text from search box
	- has [BindProperty] attrib, binds form and query values/strings with same name as the property
- [BindProperty(SupportsGet = true)]: required for binding on HTTP GET requests
- Genres: list of genres; user will be allowed to select a genre from list
- SelectList: requires using Microsoft.AspNetCore.Mvc.Rendering;
- MovieGenre: the user-selected genre from the list

in Index.cshtml.cs:
public async Task OnGetAsync()
{
    var movies = from m in _context.Movie
                    select m;

    if (!string.IsNullOrEmpty(SearchString))
    {
        movies = movies.Where(s => s.Title.Contains(SearchString));	// changes movie var to include inputted text
    }

    Movie = await movies.ToListAsync();		// executes query
}
- movies: LINQ query that will be used later to select the movies
- Where/Contains: query operator methods; dont actually execute query yet
- now filtered results appear at https://localhost:7264/Movies?searchString=Ghost

in Index.cshtml:
@page "{searchString?}"
- now URL doesnt have to include the variable part, only the input: https://localhost:7264/Movies/Ghost
- the ? means searchString is optional, aka https://localhost:7264/Movies without any input for searchString
	is a valid address(shows all movies)

in Index.cshtml:
<form>
    <p>
        Title: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Filter" />
    </p>
</form>
- makes input text box with submit button saying Filter for searchString
- already works when word put in and submitted

-------
searching by genre
in Index.cshtml.cs:
IQueryable<string> genreQuery = from m in _context.Movie
                                orderby m.Genre
                                select m.Genre;

if (!string.IsNullOrEmpty(MovieGenre))
{
    movies = movies.Where(x => x.Genre == MovieGenre);
}
Genres = new SelectList(await genreQuery.Distinct().ToListAsync());

in Index.cshtml:

<form>
    <p>
        <select asp-for="MovieGenre" asp-items="Model.Genres">
            <option value="">All</option>
        </select>
		...
- makes dropdown menu with all distinct genres in the Genre column in the database table Movie

-------------------------------------------------------------------------------
ADD A NEW FIELD

want to add new field "Rating" to Movie model and migrate the schema change to the database
	- use Code First Migrations

- Code First Migrations: Entity Framework
	- adds _EFMigrationsHistory table to db to track whether db in sync with Movie model
	- throws exception if model class not in sync with db

in Models/Movie.cs:
public decimal Rating { get; set; } = string.Empty;

in Pages/Movies/Index.cshtml:

in thead:
<th>
    @Html.DisplayNameFor(model => model.Movie[0].Rating)
</th>
in tbody:
<td>
    @Html.DisplayFor(modelItem => item.Rating)
</td>

1. add Rating code in Create, Delete, Details, and Edit.cshtml files
2. update SeedData.cs with default ratings for each movie
3. open tools->nuget package manager->package manager console
4. type:
	Add-Migration Rating	// compares Movie model w/Movie db schema and makes code in Migrations folder to migrate db schema to new model
	Update-Database			// tells framework to apply schema changes to db and preserve existing data
5. delete all movies, and when project ran, will create default movies with default ratings added to pages
	- or can delete database:
		1. select database in ssox
		2. right click db and Delete
		3. check Close existing connections
		4. OK
		5. in PMC, update db: Update-Database

-------------------------------------------------------------------------------
ADD VALIDATION

- validation rules declared/specified in one place(model class)
- rules are enforced everywhere in the app

------------------
add validation rules to movie model in Models/Movie.cs:
System.ComponentModel.DataAnnotations:
	- has built-in validation attribs that apply to class
		- [Required], [StringLength], [RegularExpression], [Range]
	- formatting attribs that dont provide any validation
		- [DataType]

in Pages/Models/Movie:
[StringLength(60, MinimumLength = 3)]
[Required]
public string? Title { get; set; } = string.Empty;
- [Required] and [MinimumLength] mean property MUST have a value(even whitespace)

- value types(decimal, int, float, DateTime) already have a form of [Required] inherently

- now when invalid input on Create page, error msgs already automatically appear

--------------------
USE DATATYPE ATTRIBUTES

- [DataType]: supplies attribs such as <a> for URL's and <a href="mailto:EmailAddress.com"> for email
	- not validation, but specifies data type that's more specific than db intrinsic type
	- ex:	[DataType(DataType.Date)]                   // specifies type of data in ReleaseDate property(a Date-type)
		- .Date, .Time, .PhoneNumber, .Currency, .EmailAddress
- [RegularExpression]: validation attr, validates format of the data
- [Column(TypeName = "decimal(18, 2)")]: needed so EF Core can map Price to currency in db
- [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]: explicitly specifies date format



[Display(Name = "Release Date")]
[DataType(DataType.Date)]
- [DataType]: conveys semantics of data instead of how to render on screen like [Display]
- can be combined in one line:
    [Display(Name = "Release Date"), DataType(DataType.Date)]

- ex of genre validation on one line:
[RegularExpression(@"^[A-Z]+[a-zA-Z\s]*$"), Required, StringLength(30)]


- jQuery validation(error msgs on screen in red text about input invalid) doesnt work with [Range] and [DateTime]

- bc added validation attribs, need to create a migration so schema in db is consistent with model class Movie.cs:
Add-Migration New_DataAnnotations	// makes code file in Migrations folder to carry out changes in db
Update-Database						// runs the Up function in aforementioned code file

_____________________________________________________________________________________________________________________________
api response path to Summary:
projects/project/summary
	- ex: Empowering Afghan women through the provision of education and training opportunities as well as basic health services
<projects>
	<project>
		...
		<summary>...</summary>
to Countries:
projects/project/countries/country/name
	- ex: Afghanistan, India, United States
<projects>
	<project>
		...
		<organization>
			...
			<countries>
				<country>
					...
					<name>Afghanistan</name>
				</country>
				<country>
					...
					<name>India<name>
				<country>
				<country>
					...
					<name>United States<name>
				<country>
			<countries>
		</organization>

to HomeCountry:
<projects>
	<project>
		...
		<contactCountry>United States</contactCountry>

to Url:
<projects>
	<project>
		<organization>
			...
			<url>http://www.sakena.org</url>
